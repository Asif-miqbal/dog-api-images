name: File size and name checks

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure git with username
        run: |
          git config --global user.email "1583854+ElliottLandsborough@users.noreply.github.com"
          git config --global user.name "ElliottLandsborough"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Check output of vars
        run: |
          echo $GITHUB_HEAD_REF
          echo ${{ steps.extract_branch.outputs.branch }}

      - name: Display a list of uppercase files
        run: find . -name "*.*[A-Z]*" ! -name "*.*[^A-Z]*"

      - name: Find uppercase 'JPG', 'JPEG' or 'PNG' and rename to lowercase equivalents
        run: find . -depth -regex ".*\.\(JPG\|JPEG\|PNG\)" -type f -exec bash -c 'base=${0%.*} ext=${0##*.} a=${base,,}.${ext,,}; [ "$a" != "$0" ] && mv -- "$0" "$a"' {} \;

      - name: Display a list of uppercase files
        run: find . -name "*.*[A-Z]*" ! -name "*.*[^A-Z]*"

      # Do we have any 'png' files? Convert to 'jpg'
      - name: Fix 'png' files
        run: find . -name "*.png" -exec mogrify -format jpg {} \;

      # Delete 'png files'
      - name: Delete 'png' files
        run: find . -name "*.png" -delete;

      - name: Rename 'jpeg' to 'jpg' after installing rename package
        run: |
          sudo apt install -y rename
          find . -type f -name '*.jpeg' -print0 | xargs -0 rename 's/\.jpeg/\.jpg/'

      # Lossy jpeg optimization
      - name: Bring resolution down to 1080 maximum on x and y, 80% qual on images over 500K big
        run: find . -type f -regex ".*\.\(jpg\|jpeg\)" -size +500k -exec convert {} -resize 1080x1080 -quality 70% {} \;

      # Twice, once to actually output the list, second time to output non zero and break CI
      - name: List images that are too large
        run: |
         find . -regex ".*\.\(jpg\|jpeg\)" -type f -size +500k
         find . -regex ".*\.\(jpg\|jpeg\)" -type f -size +500k -exec false {} +

      # Replace spaces with '_' in filenames
      - name: Replace spaces with '_' in filenames
        run: find . -type f -name "* *" | while read file; do mv "$file" ${file// /_}; done

      # Install jpegoptim, only on master
      - name: Install jpegoptim
        if: github.ref == 'refs/heads/master'
        run: |
          sudo apt update
          sudo apt install -y jpegoptim

      # Lossless jpeg optimization, only on master
      - name: Run through jpegoptim
        if: github.ref == 'refs/heads/master'
        run: find . -type f -regex ".*\.\(jpg\|jpeg\)" -exec jpegoptim -t --all-progressive --strip-all {} \;

      # Push to repo
      - name: Commit if new files exist
        run: |
          if [[ $(git status -s) ]]; then
            git add -A
            git commit -m "Optimize images"
            git push origin HEAD:${{ steps.extract_branch.outputs.branch }}
          fi

      # Push to repo, only on master
      #- name: Commit report
      #  if: github.ref == 'refs/heads/master'
      #  run: |
      #    if [[ $(git status -s) ]]; then
      #      git add -A
      #      git commit -m "Optimize images"
      #      if [ -z "${GITHUB_HEAD_REF}" ]
      #      then
      #        echo "\${GITHUB_HEAD_REF} is empty"
      #        git push
      #      else
      #        echo "\${GITHUB_HEAD_REF} is NOT empty"
      #        echo "Skiiping push, will re-do when PR is merged."
      #        #git push origin HEAD:${GITHUB_HEAD_REF}
      #      fi
      #    fi
